
忽略断点handle SIG36 ignore noprint
暂停调试ctrl+c


运行gdb:
gdb

(gdb) attach xxxxx --- xxxxx为利用ps命令获得的子进程process id

(gdb) stop --- 这点很重要，你需要先暂停那个子进程，然后设置一些断点和一些Watch

(gdb) break 37 -- 在result = wib(value, div);这行设置一个断点,可以使用list命令察看源代码
Breakpoint 1 at 0x10808: file eg1.c, line 37.

(gdb) continue 继续调试
Continuing.
Breakpoint 1, main () at eg1.c:37
37                              result = wib(value, div);

(gdb) step 单步调试
wib (no1=10, no2=6) at eg1.c:13
13              diff = no1 - no2;

(gdb) continue 继续调试
Continuing.
Breakpoint 1, main () at eg1.c:37
37                              result = wib(value, div);

(gdb) next
14              result = no1 / diff;
(gdb) print diff 打印值
$6 = 0        ------- 除数为0，我们找到罪魁祸首了。

(gdb) next
Program received signal SIGFPE, Arithmetic exception.
0xff29d830 in .div () from /usr/lib/libc.so.1


【查看文件】
list / l
列出产生执行文件的源代码的一部分

//列出 line1 到 line2 行之间的源代码
(gdb) list line1, line2

//输出从上次调用list命令开始往后的10行程序代码
(gdb) list

//输出第 n 行附近的10行程序代码
(gdb) list n

//输出函数function前后的10行程序代码
(gdb) list function

【执行程序】
run / r
运行准备调试的程序，在它后面可以跟随发给该程序的任何参数，包括标准输入和标准输出说明符(<和>)和shell通配符（*、？、[、]）在内。
如果你使用不带参数的run命令，gdb就再次使用你给予前一条run命令的参数，这是很有用的。

set args 
命令就可以修改发送给程序的参数，而使用

show args 
命令就可以查看其缺省参数的列表。


【查看变量的值】
print / p
查看变量的值

//利用print 命令可以检查各个变量的值。
(gdb) print p (p为变量名)
print 是 gdb 的一个功能很强的命令，利用它可以显示被调试的语言中任何有效的表达式。表达式除了包含你程序中的变量外，还可以包含以下内容：

//对程序中函数的调用
(gdb) print find_entry(1, 0)

//数据结构和其他复杂对象
(gdb) print *table_start
$8={e=reference=’\000’,location=0x0,next=0x0}

//值的历史成分
(gdb)print $1 ($1为历史记录变量,在以后可以直接引用 $1 的值)

whatis
查看变量的类型
//whatis 命令可以显示某个变量的类型
(gdb) whatis p
type = int *


【设置与清除断点】
break / b
可以用来在调试的程序中设置断点，该命令有如下四种形式

//使程序恰好在执行给定行之前停止
break line-number
//使程序恰好在进入指定的函数之前停止
break function-name
//如果condition（条件）是真，程序到达指定行或函数时停止
break line-or-function if condition
//在指定例程的入口处设置断点
break routine-name
如果该程序是由很多原文件构成的，你可以在各个原文件中设置断点，而不是在当前的原文件中设置断点，其方法如下：
(gdb) break filename:line-number
(gdb) break filename:function-name

break  if
要想设置一个条件断点，可以利用break if命令，如下所示：
(gdb) break line-or-function if expr
(gdb) break 46 if testsize==100

clean number
清除原文件中某一代码行上的所有断点


【断点管理】
1. 显示当前gdb的断点信息
info break

2. delete 删除指定的某个断点
delete breakpoint

//该命令将会删除编号为1的断点
(gdb) delete breakpoint 1
//如果不带编号参数，将删除所有的断点
(gdb) delete breakpoint

3. 禁止、允许使用某个断点
disable breakpoint 1
enable breakpoint 1
该命令将禁止、允许断点 1，同时断点信息的 (Enb)域将变为 n、y


【单步执行】
next / n  不进入的单步执行

step 进入的单步执行

finish  如果已经进入了某函数，而想退出该函数返回到它的调用函数中，可使用命令finish

until  结束当前循环


【函数执行】
call name
调用和执行一个函数

(gdb) call gen_and_sork( 1234,1,0 )
(gdb) call printf(“abcd”)
$1=4  
finish 结束执行当前函数，显示其返回值（如果有的话）


【文件搜索】
search text
该命令可显示在当前文件中包含text串的下一行。

reverse-search text
该命令可以显示包含text 的前一行。


【常用命令】
backtrace / bt	显示程序中的当前位置和表示如何到达当前位置的栈跟踪（同义词：where）
breakpoint / b	在程序中设置一个断点
cd 				改变当前工作目录
clear 			删除刚才停止处的断点
commands 		命中断点时，列出将要执行的命令
continue 		从断点开始继续执行
delete 			删除一个断点或监测点；也可与其他命令一起使用
display 		程序停止时显示变量和表达时
down 			下移栈帧，使得另一个函数成为当前函数
frame 			选择下一条continue命令的帧
info 			显示与该程序有关的各种信息
jump 			在源程序中的另一点开始运行
kill 			异常终止在gdb 控制下运行的程序
list 			列出相应于正在执行的程序的原文件内容
next 			执行下一个源程序行，从而执行其整体中的一个函数
print 			显示变量或表达式的值
pwd 			显示当前工作目录
ptype 			显示一个数据结构（如一个结构或C++类）的内容
quit 			退出gdb
run 			执行该程序
reverse-search 在源文件中反向搜索正规表达式
search 			在源文件中搜索正规表达式
set variable 	给变量赋值
signal			将一个信号发送到正在运行的进程
step 			执行下一个源程序行，必要时进入下一个函数
undisplay display 命令的反命令，不要显示表达式
until 			结束当前循环
up 				上移栈帧，使另一函数成为当前函数
watch 			在程序中设置一个监测点（即数据断点）
whatis 			显示变量或函数类型